import SwiftUI

struct GeminiScreen: View {
    @State private var prompt: String = ""
    @State private var response: String = ""
    @State private var isChatOpen = false
    @State private var isLoading = false

    let sampleQuestions = [
        "Proje konum ne olabilir?",
        "CVâ€™me neler yazmalÄ±yÄ±m?",
        "Verimli ders Ã§alÄ±ÅŸma yollarÄ±?",
        "Staj nereden bulabilirim?",
        "YurtdÄ±ÅŸÄ± master hakkÄ±nda bilgi verir misin?",
        "Ders Ã§alÄ±ÅŸÄ±rken nasÄ±l odaklanÄ±rÄ±m?",
        "YazÄ±n kendimi nasÄ±l geliÅŸtiririm?",
        "Motivasyonumu nasÄ±l artÄ±rabilirim?",
        "Zaman yÃ¶netimini nasÄ±l geliÅŸtirebilirim?",
        "Finale nasÄ±l Ã§alÄ±ÅŸmalÄ±yÄ±m?"
    ]

    var body: some View {
        ZStack {
            NavigationView {
                ScrollView {
                    VStack(alignment: .leading, spacing: 16) {

                        // ðŸ”µ Mavi kutu baÅŸlÄ±k
                        ZStack {
                            RoundedRectangle(cornerRadius: 16)
                                .fill(Color.blue)
                                .frame(maxWidth: .infinity)
                                .frame(height: 70)

                            Text("Ãœniversite Ã–ÄŸrencileri En Ã‡ok Ne Soruyor?")
                                .foregroundColor(.white)
                                .font(.system(size: 18, weight: .semibold))
                                .multilineTextAlignment(.center)
                                .padding(.horizontal)
                        }
                        .padding(.bottom, 8)

                        // ðŸ”¹ Ã–rnek sorular listesi
                        VStack(spacing: 10) {
                            ForEach(sampleQuestions, id: \.self) { question in
                                Button(action: {
                                    prompt = question
                                    isChatOpen = true
                                }) {
                                    Text(question)
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                        .padding()
                                        .background(Color.gray.opacity(0.1))
                                        .foregroundColor(.blue)
                                        .cornerRadius(10)
                                }
                            }
                        }

                        Spacer()
                            .frame(height: 100)
                    }
                    .padding()
                }
                .navigationTitle("")
                .navigationBarHidden(true)
            }

            // ðŸ”˜ Yuvarlak mesaj ikonlu buton
            VStack {
                Spacer()
                HStack {
                    Spacer()
                    Button(action: {
                        isChatOpen.toggle()
                    }) {
                        Image(systemName: "message.fill")
                            .font(.system(size: 22))
                            .foregroundColor(.white)
                            .padding(20)
                            .background(Color.blue)
                            .clipShape(Circle())
                            .shadow(radius: 4)
                    }
                    .padding()
                }
            }

            // ðŸ’¬ SaÄŸdan aÃ§Ä±lan chat kutusu
            if isChatOpen {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        VStack(alignment: .leading, spacing: 12) {
                            HStack {
                                Text("Gemini Chat")
                                    .font(.headline)
                                Spacer()
                                Button(action: {
                                    isChatOpen = false
                                }) {
                                    Image(systemName: "xmark")
                                        .foregroundColor(.gray)
                                }
                            }

                            TextField("Sorunu yaz...", text: $prompt)
                                .textFieldStyle(RoundedBorderTextFieldStyle())

                            Button("Sor") {
                                askGemini()
                            }
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(prompt.isEmpty ? Color.gray : Color.blue)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                            .disabled(prompt.isEmpty)

                            if isLoading {
                                ProgressView("YanÄ±tlanÄ±yor...")
                            }

                            if !response.isEmpty {
                                Text("YanÄ±t:")
                                    .font(.subheadline).bold()
                                ScrollView {
                                    Text(response)
                                        .padding()
                                        .background(Color.gray.opacity(0.1))
                                        .cornerRadius(8)
                                }
                                .frame(height: 150)
                            }
                        }
                        .padding()
                        .frame(width: 320)
                        .background(Color(.systemBackground))
                        .cornerRadius(16)
                        .shadow(radius: 10)
                        .padding()
                    }
                }
                .transition(.move(edge: .trailing))
                .animation(.easeInOut, value: isChatOpen)
            }
        }
    }

    func askGemini() {
        isLoading = true
        GeminiService().generateText(from: prompt) { result in
            DispatchQueue.main.async {
                self.response = result ?? "YanÄ±t alÄ±namadÄ±."
                self.isLoading = false
            }
        }
    }
}
